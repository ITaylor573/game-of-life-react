{"version":3,"sources":["components/Title.js","components/ControlButton.js","components/GameCell.js","components/GameGrid.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","ControlButton","props","onClick","handleClick","children","GameCell","cellState","onMouseDown","e","preventDefault","setClickedState","toggleState","rowIndex","columnIndex","onMouseEnter","buttons","clickedState","GameGrid","bind","newState","this","gameCells","gameState","map","row","key","React","Component","Game","randomBoardGenerator","Math","random","rows","columns","speed","runningTimerId","state","initialGameState","running","iteration","setRunning","nextIteration","getLiveNeighbours","handlePlayClick","handleResetClick","handleNextClick","handleRandomClick","generator","i","j","push","updatedGameState","slice","undefined","setState","newRunning","setInterval","clearInterval","nextGameState","liveNeighbours","y","x","neighbourRow","neighbourColumn","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a54ba066.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Title.css';\r\n\r\nfunction Title() {\r\n  return (\r\n    <>\r\n      <h1 className={'heading'}>Conway's Game of Life</h1>\r\n      <h2 className={'sub-heading'}>(With React!)</h2>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ControlButton.css';\r\n\r\nfunction ControlButton({ ...props }) {\r\n  return (\r\n    <button onClick={props.handleClick} className={'control-button'}>\r\n      {props.children}\r\n    </button>\r\n  )\r\n}\r\n\r\nControlButton.propTypes = {\r\n  handleClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ControlButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './GameCell.css';\r\n\r\nfunction GameCell({ ...props }) {\r\n    let handleClick = function (e) {\r\n        e.preventDefault();\r\n        props.setClickedState(props.cellState);\r\n        props.toggleState(props.rowIndex, props.columnIndex);\r\n    }\r\n\r\n    let handleMouseEnter = function (e) {\r\n        if (e.buttons !== 1) return;\r\n        props.toggleState(props.rowIndex, props.columnIndex, !props.clickedState);\r\n    }\r\n\r\n    let className = 'game-cell ' + (props.cellState ? 'on' : 'off');\r\n    return <td onMouseDown={handleClick} onMouseEnter={handleMouseEnter} className={className} />\r\n}\r\n\r\nGameCell.propTypes = {\r\n    setClickedState: PropTypes.func.isRequired,\r\n    toggleState: PropTypes.func.isRequired,\r\n    cellState: PropTypes.bool.isRequired,\r\n    rowIndex: PropTypes.number.isRequired,\r\n    columnIndex: PropTypes.number.isRequired\r\n}\r\n\r\nexport default GameCell;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './GameGrid.css';\r\nimport GameCell from './GameCell';\r\n\r\n\r\nclass GameGrid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.clickedState = true;\r\n    this.setClickedState = this.setClickedState.bind(this);\r\n  }\r\n\r\n  setClickedState(newState) {\r\n    this.clickedState = newState;\r\n  }\r\n\r\n  render() {\r\n    const gameCells = this.props.gameState.map((row, rowIndex) =>\r\n      <tr key={rowIndex}>\r\n        {row.map((cellState, columnIndex) =>\r\n          <GameCell\r\n            setClickedState={this.setClickedState}\r\n            clickedState={this.clickedState}\r\n            toggleState={this.props.toggleState}\r\n            rowIndex={rowIndex}\r\n            columnIndex={columnIndex}\r\n            cellState={cellState}\r\n            key={rowIndex + \"-\" + columnIndex} />\r\n        )}\r\n      </tr>\r\n    );\r\n\r\n    return (\r\n      <table className={'game-grid'}>\r\n        <tbody>\r\n          {gameCells}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nGameGrid.propTypes = {\r\n  toggleState: PropTypes.func.isRequired,\r\n  gameState: PropTypes.array.isRequired\r\n}\r\n\r\nexport default GameGrid;\r\n","import React from 'react';\r\nimport './Game.css';\r\nimport ControlButton from './ControlButton';\r\nimport GameGrid from './GameGrid';\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.rows = 25;\r\n    this.columns = 25;\r\n    this.speed = 100 // milliseconds.\r\n    this.runningTimerId = null;\r\n\r\n    this.state = {\r\n      gameState: this.initialGameState(this.rows, this.columns, this.randomBoardGenerator),\r\n      running: false,\r\n      iteration: 0\r\n    }\r\n\r\n    this.toggleState = this.toggleState.bind(this);\r\n    this.setRunning = this.setRunning.bind(this);\r\n    this.nextIteration = this.nextIteration.bind(this);\r\n    this.getLiveNeighbours = this.getLiveNeighbours.bind(this);\r\n    this.handlePlayClick = this.handlePlayClick.bind(this);\r\n    this.handleResetClick = this.handleResetClick.bind(this);\r\n    this.handleNextClick = this.handleNextClick.bind(this);\r\n    this.handleRandomClick = this.handleRandomClick.bind(this);\r\n  }\r\n\r\n  randomBoardGenerator = () => Math.random() > 0.5;\r\n\r\n  initialGameState(rows, columns, generator = () => false) {\r\n    let gameState = [];\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < columns; j++) {\r\n        row.push(generator());\r\n      }\r\n      gameState.push(row);\r\n    }\r\n    return gameState;\r\n  }\r\n\r\n  toggleState(rowIndex, columnIndex, newState) {\r\n    let updatedGameState = this.state.gameState.map(row => row.slice());\r\n    if (newState === undefined || newState === null) {\r\n      updatedGameState[rowIndex][columnIndex] = !updatedGameState[rowIndex][columnIndex];\r\n    } else {\r\n      updatedGameState[rowIndex][columnIndex] = newState;\r\n    }\r\n    this.setState({ gameState: updatedGameState });\r\n  }\r\n\r\n  setRunning(newRunning) {\r\n    this.setState({ running: newRunning });\r\n    if (newRunning) {\r\n      this.nextIteration();\r\n      this.runningTimerId = setInterval(this.nextIteration, this.speed);\r\n    } else {\r\n      clearInterval(this.runningTimerId);\r\n    }\r\n  }\r\n\r\n  nextIteration() {\r\n    // Conway's Game of Life logic.\r\n    let nextGameState = this.state.gameState.map((row, rowIndex) =>\r\n      row.map((cellState, columnIndex) => {\r\n        const liveNeighbours = this.getLiveNeighbours(this.state.gameState, rowIndex, columnIndex);\r\n        if (cellState && (liveNeighbours === 2 || liveNeighbours === 3)) return true;\r\n        if (!cellState && liveNeighbours === 3) return true;\r\n        return false;\r\n      })\r\n    );\r\n    this.setState({\r\n      gameState: nextGameState,\r\n      iteration: this.state.iteration + 1\r\n    });\r\n  }\r\n\r\n  getLiveNeighbours(gameState, rowIndex, columnIndex) {\r\n    let liveNeighbours = 0;\r\n    for (let y = -1; y <= 1; y++) {\r\n      for (let x = -1; x <= 1; x++) {\r\n        if (x === 0 && y === 0) continue;\r\n\r\n        let neighbourRow = rowIndex + y;\r\n        if (neighbourRow < 0) {\r\n          neighbourRow = this.rows - 1;\r\n        } else if (neighbourRow >= this.rows) {\r\n          neighbourRow = 0;\r\n        }\r\n\r\n        let neighbourColumn = columnIndex + x;\r\n        if (neighbourColumn < 0) {\r\n          neighbourColumn = this.columns - 1;\r\n        } else if (neighbourColumn >= this.columns) {\r\n          neighbourColumn = 0;\r\n        }\r\n\r\n        if (gameState[neighbourRow][neighbourColumn]) {\r\n          liveNeighbours++;\r\n        };\r\n      }\r\n    }\r\n    return liveNeighbours;\r\n  }\r\n\r\n  handleResetClick() {\r\n    clearInterval(this.runningTimerId);\r\n    this.setState({\r\n      gameState: this.initialGameState(this.rows, this.columns),\r\n      running: false,\r\n      iteration: 0\r\n    });\r\n  }\r\n\r\n  handlePlayClick() {\r\n    this.setRunning(!this.state.running);\r\n  }\r\n\r\n  handleNextClick() {\r\n    this.setRunning(false);\r\n    this.nextIteration();\r\n  }\r\n\r\n  handleRandomClick() {\r\n    this.setRunning(false);\r\n    this.setState({\r\n      gameState: this.initialGameState(this.rows, this.columns, this.randomBoardGenerator),\r\n      iteration: 0\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={'game'}>\r\n        <GameGrid toggleState={this.toggleState} gameState={this.state.gameState} />\r\n        <div className={'controls'}>\r\n          <ControlButton handleClick={this.handlePlayClick}>\r\n            {this.state.running ? 'PAUSE' : 'PLAY'}\r\n          </ControlButton>\r\n          <ControlButton handleClick={this.handleResetClick}>RESET</ControlButton>\r\n          <ControlButton handleClick={this.handleNextClick}>NEXT</ControlButton>\r\n          <ControlButton handleClick={this.handleRandomClick}>RANDOM</ControlButton>\r\n        </div>\r\n        <div className={'information'}>\r\n          <p>Iteration: {this.state.iteration}</p>\r\n          <p>Click and drag on the grid to add or remove cells</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport './App.css';\nimport Title from './components/Title';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <>\n      <Title />\n      <Game />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}